{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://forbes-w-hw3-refactor/./src/utils.ts","webpack://forbes-w-hw3-refactor/./src/enums/audio-defaults.enum.ts","webpack://forbes-w-hw3-refactor/./src/audio.ts","webpack://forbes-w-hw3-refactor/./src/canvas.ts","webpack://forbes-w-hw3-refactor/./src/enums/main-defaults.enum.ts","webpack://forbes-w-hw3-refactor/./src/enums/toggle-buttons.enum.ts","webpack://forbes-w-hw3-refactor/./src/classes/CanvasSprite.ts","webpack://forbes-w-hw3-refactor/./src/classes/Sprite.ts","webpack://forbes-w-hw3-refactor/./src/main.ts","webpack://forbes-w-hw3-refactor/./src/loader.ts"],"sourcesContent":["import { ColorStop } from \"./interfaces/colorStop.interface\";\r\nimport { SliderConfig } from \"./interfaces/sliderConfig.interface\";\r\n\r\nconst makeColor = (red: number, green: number, blue: number, alpha: number = 1): string => {\r\n    return `rgba(${red},${green},${blue},${alpha})`;\r\n};\r\n\r\nconst getRandom = (min: number, max: number): number => {\r\n    return Math.random() * (max - min) + min;\r\n};\r\n\r\nconst getRandomColor = (): string => {\r\n    const floor = 35;\r\n    const getByte = () => getRandom(floor, 255 - floor);\r\n    return `rgba(${getByte()},${getByte()},${getByte()},1)`;\r\n};\r\n\r\nconst getLinearGradient = (ctx: CanvasRenderingContext2D, startX: number, startY: number, endX: number, endY: number, colorStops: ColorStop[]): CanvasGradient => {\r\n    const lg = ctx.createLinearGradient(startX, startY, endX, endY);\r\n    for (const stop of colorStops) {\r\n        lg.addColorStop(stop.percent, stop.color);\r\n    }\r\n    return lg;\r\n};\r\n\r\nconst goFullscreen = (element: HTMLElement): void => {\r\n    // fun fact: lint standards require else if to be in new line\r\n    if (element.requestFullscreen) {\r\n        element.requestFullscreen();\r\n    }\r\n};\r\n\r\nconst setupSlider = ({ sliderId, labelId, unit, setValueCallback }: SliderConfig): void => {\r\n    const slider = document.querySelector(sliderId) as HTMLInputElement;\r\n    const label = document.querySelector(labelId) as HTMLLabelElement;\r\n\r\n    slider.oninput = e => {\r\n        if (e.target) {\r\n            setValueCallback(Number((e.target as HTMLInputElement).value));\r\n            label.innerHTML = `${(e.target as HTMLInputElement).value} ${unit}`;\r\n        }\r\n    };\r\n\r\n    slider.dispatchEvent(new Event(\"input\"));\r\n};\r\n\r\nconst formatTime = (seconds: number): string => {\r\n    const minutes = Math.floor(seconds / 60);\r\n    const secs = Math.floor(seconds % 60);\r\n\r\n    // format time as mm:ss\r\n    return `${String(minutes).padStart(1, '0')}:${String(secs).padStart(2, '0')}`;\r\n};\r\n\r\n\r\nexport { makeColor, getRandomColor, getLinearGradient, goFullscreen, setupSlider, formatTime };","export enum Defaults {\r\n    GAIN = .5,\r\n    NUM_SAMPLE = 256\r\n}\r\n\r\nexport enum BiquadDefaults {\r\n    BASS_FREQ = 200,\r\n    BASS_GAIN = 6,\r\n    TREBLE_FREQ = 4000,\r\n    TREBLE_GAIN = 4\r\n}","import { Defaults, BiquadDefaults } from \"./enums/audio-defaults.enum\";\r\n\r\nlet audioCtx: AudioContext;\r\nlet element: HTMLAudioElement;\r\nlet sourceNode: MediaElementAudioSourceNode;\r\nlet analyserNode: AnalyserNode;\r\nlet gainNode: GainNode;\r\nlet bassFilter: BiquadFilterNode;\r\nlet trebleFilter: BiquadFilterNode;\r\n\r\nconst setupWebaudio = (filePath: string): void => {\r\n    const AudioContext = window.AudioContext;\r\n\r\n    audioCtx = new AudioContext();\r\n    element = new Audio();\r\n\r\n    loadSoundFile(filePath);\r\n\r\n    // create nodes\r\n    sourceNode = audioCtx.createMediaElementSource(element);\r\n    analyserNode = audioCtx.createAnalyser();\r\n    analyserNode.fftSize = Defaults.NUM_SAMPLE;\r\n\r\n    // create gain node\r\n    gainNode = audioCtx.createGain();\r\n    gainNode.gain.value = Defaults.GAIN;\r\n\r\n    // create bass filter\r\n    bassFilter = audioCtx.createBiquadFilter();\r\n    bassFilter.type = \"lowshelf\";\r\n    bassFilter.frequency.setValueAtTime(BiquadDefaults.BASS_FREQ, audioCtx.currentTime);\r\n    bassFilter.gain.setValueAtTime(BiquadDefaults.BASS_GAIN, audioCtx.currentTime);\r\n\r\n    // create treble filter\r\n    trebleFilter = audioCtx.createBiquadFilter();\r\n    trebleFilter.type = \"highshelf\";\r\n    trebleFilter.frequency.setValueAtTime(BiquadDefaults.TREBLE_FREQ, audioCtx.currentTime);\r\n    trebleFilter.gain.setValueAtTime(BiquadDefaults.TREBLE_GAIN, audioCtx.currentTime);\r\n\r\n    // connect nodes\r\n    sourceNode.connect(analyserNode);\r\n    analyserNode.connect(bassFilter);\r\n    bassFilter.connect(trebleFilter);\r\n    trebleFilter.connect(gainNode);\r\n    gainNode.connect(audioCtx.destination);\r\n}\r\n\r\nconst loadSoundFile = (filePath: string): void => {\r\n    element.src = filePath\r\n};\r\n\r\nconst playCurrentSound = (): void => {\r\n    element.play()\r\n};\r\n\r\nconst pauseCurrentSound = (): void => {\r\n    element.pause()\r\n};\r\n\r\nconst setVolume = (value: number): void => {\r\n    gainNode.gain.value = value;\r\n}\r\n\r\nconst setBassFrequency = (value: number): void => {\r\n    bassFilter.frequency.setValueAtTime(value, audioCtx.currentTime);\r\n}\r\n\r\nconst setBassGain = (value: number): void => {\r\n    bassFilter.gain.setValueAtTime(value, audioCtx.currentTime);\r\n}\r\n\r\nconst setTrebleFrequency = (value: number): void => {\r\n    trebleFilter.frequency.setValueAtTime(value, audioCtx.currentTime);\r\n}\r\n\r\nconst setTrebleGain = (value: number): void => {\r\n    trebleFilter.gain.setValueAtTime(value, audioCtx.currentTime);\r\n}\r\n\r\nconst getCurrentTime = (): number => {\r\n    return element.currentTime;\r\n};\r\n\r\nconst getDuration = (): number => {\r\n    return element.duration;\r\n};\r\n\r\nconst seekTo = (time: number): void => {\r\n    element.currentTime = time;\r\n};\r\n\r\nexport {\r\n    audioCtx,\r\n    setupWebaudio,\r\n    playCurrentSound,\r\n    pauseCurrentSound,\r\n    loadSoundFile,\r\n    setVolume,\r\n    setBassFrequency,\r\n    setBassGain,\r\n    setTrebleFrequency,\r\n    setTrebleGain,\r\n    getCurrentTime,\r\n    getDuration,\r\n    seekTo,\r\n    analyserNode\r\n};","import * as utils from './utils';\r\nimport { CanvasSprite } from './classes/CanvasSprite';\r\nimport { DrawParams } from './interfaces/drawParams.interface';\r\n\r\nlet ctx: CanvasRenderingContext2D;\r\nlet canvasWidth: number;\r\nlet canvasHeight: number;\r\nlet gradient: CanvasGradient;\r\nlet analyserNode: AnalyserNode;\r\nlet audioData: Uint8Array;\r\n\r\nlet sprite1: CanvasSprite;\r\nlet sprite2: CanvasSprite;\r\nlet sprite3: CanvasSprite;\r\n\r\nconst setupCanvas = (canvasElement: HTMLCanvasElement, analyserNodeRef: AnalyserNode): void => {\r\n    ctx = canvasElement.getContext(\"2d\")!;\r\n    canvasWidth = canvasElement.width;\r\n    canvasHeight = canvasElement.height;\r\n\r\n    gradient = utils.getLinearGradient(ctx, 0, 0, canvasWidth, canvasHeight, [\r\n        { percent: 0, color: \"rgb(28, 133, 92)\" },\r\n        { percent: 0.5, color: \"rgb(55,100,85)\" },\r\n        { percent: 1, color: \"rgb(30, 143, 118)\" }\r\n    ]);\r\n\r\n    analyserNode = analyserNodeRef;\r\n    audioData = new Uint8Array(analyserNode.fftSize / 2);\r\n\r\n    // create sprites\r\n    sprite1 = new CanvasSprite(100, 100, 10, 'rgba(30, 80, 100, 0.4)', 1);\r\n    sprite2 = new CanvasSprite(100, 100, 10, 'rgba(30, 80, 85, 0.4)', 0.5);\r\n    sprite3 = new CanvasSprite(100, 100, 10, 'rgba(30, 80, 70, 0.4)', 0.25);\r\n}\r\n\r\nconst draw = (params: DrawParams = {\r\n    visualizerType: false,\r\n    showSprites: false,\r\n    showGradient: false,\r\n    showBars: false,\r\n    showCircles: false,\r\n    showNoise: false,\r\n    showInvert: false,\r\n    showEmboss: false\r\n}) => {\r\n    // draw visualizer depending on the type\r\n    if (params.visualizerType) {\r\n        analyserNode.getByteFrequencyData(audioData);\r\n    } else {\r\n        analyserNode.getByteTimeDomainData(audioData);\r\n    }\r\n\r\n    ctx.save();\r\n    ctx.fillStyle = \"black\";\r\n    ctx.globalAlpha = .1;\r\n    ctx.fillRect(0, 0, canvasWidth, canvasHeight);\r\n    ctx.restore();\r\n\r\n    // show gradient\r\n    if (params.showGradient) {\r\n        ctx.save();\r\n        ctx.fillStyle = gradient;\r\n        ctx.globalAlpha = .8;\r\n        ctx.fillRect(0, 0, canvasWidth, canvasHeight);\r\n        ctx.restore();\r\n    }\r\n\r\n    // show bars\r\n    if (params.showBars) {\r\n        const barSpacing = 2;\r\n        const margin = 0;\r\n        const screenWidthForBars = canvasWidth - (audioData.length * barSpacing) - margin;\r\n        const barWidth = screenWidthForBars / audioData.length;\r\n\r\n        ctx.save();\r\n\r\n        const gradient = ctx.createLinearGradient(0, canvasHeight + 15, 0, 0);\r\n        gradient.addColorStop(0, 'rgba(35,100, 75,0.85)');\r\n        gradient.addColorStop(1, 'rgba(250,220, 0,0.85)');\r\n\r\n        ctx.fillStyle = gradient;\r\n        ctx.strokeStyle = 'rgba(0,0,0,0.15)';\r\n        ctx.lineWidth = 1.5;    \r\n        ctx.lineJoin = 'round';\r\n\r\n        for (let i = 0; i < audioData.length; i++) {\r\n            const barHeight = Math.max((audioData[i] / 255) * canvasHeight * 0.8, 1);\r\n            const x = margin + i * (barWidth + barSpacing);\r\n            const y = canvasHeight - barHeight;\r\n\r\n            ctx.fillRect(Math.floor(x), Math.floor(y), Math.ceil(barWidth), Math.ceil(barHeight));\r\n            ctx.strokeRect(Math.floor(x), Math.floor(y), Math.ceil(barWidth), Math.ceil(barHeight));\r\n        }\r\n\r\n        ctx.restore();\r\n    }\r\n\r\n    // show circles\r\n    if (params.showCircles) {\r\n        const maxRadius = canvasHeight / 4;\r\n        const centerX = canvasWidth / 2;\r\n        const centerY = canvasHeight / 2;\r\n\r\n        ctx.save();\r\n        ctx.globalAlpha = 0.5;\r\n\r\n        for (let i = 0; i < audioData.length; i++) {\r\n            const percent = audioData[i] !== undefined ? audioData[i] / 255 : 0;\r\n            const pulse = Math.sin(Date.now() / 300 + i) * 0.05;\r\n            let circleRadius = Math.max((percent + pulse) * maxRadius, 0);\r\n\r\n            ctx.beginPath();\r\n            ctx.fillStyle = utils.makeColor(0, 160, 160, 0.4 - percent / 3.0);\r\n            ctx.arc(centerX, centerY, circleRadius, 0, 2 * Math.PI, false);\r\n            ctx.fill();\r\n            ctx.closePath();\r\n\r\n            ctx.beginPath();\r\n            ctx.fillStyle = utils.makeColor(0, 136, 200, 0.15 - percent / 10.0);\r\n            ctx.arc(centerX, centerY, Math.max(circleRadius * 1.6 + pulse * 20, 0), 0, 2 * Math.PI, false);\r\n            ctx.fill();\r\n            ctx.closePath();\r\n\r\n            ctx.save();\r\n\r\n            ctx.beginPath();\r\n            ctx.fillStyle = utils.makeColor(0, 255, 150, 0.6 - percent / 5.0);\r\n            ctx.arc(centerX, centerY, Math.max(circleRadius * 0.5 - pulse * 10, 0), 0, 2 * Math.PI, false);\r\n            ctx.fill();\r\n            ctx.closePath();\r\n\r\n            ctx.restore();\r\n        }\r\n\r\n        ctx.restore();\r\n    }\r\n\r\n    // show sprites\r\n    if (params.showSprites) {\r\n        sprite1.update(audioData, canvasWidth, canvasHeight);\r\n        sprite2.update(audioData, canvasWidth, canvasHeight);\r\n        sprite3.update(audioData, canvasWidth, canvasHeight);\r\n\r\n        sprite1.draw(ctx);\r\n        sprite2.draw(ctx);\r\n        sprite3.draw(ctx);\r\n    }\r\n\r\n    const imageData = ctx.getImageData(0, 0, canvasWidth, canvasHeight);\r\n    const data = imageData.data;\r\n    const length = data.length;\r\n    const width = imageData.width;\r\n\r\n    for (let i = 0; i < length; i += 4) {\r\n        // show noise\r\n        if (params.showNoise && Math.random() < .05) {\r\n            data[i] = data[i + 1] = data[i + 2] = 255;\r\n        }\r\n\r\n        // show invert\r\n        if (params.showInvert) {\r\n            let red = data[i], green = data[i + 1], blue = data[i + 2];\r\n            data[i] = 255 - red;\r\n            data[i + 1] = 255 - green;\r\n            data[i + 2] = 255 - blue;\r\n        }\r\n    }\r\n\r\n    // show emboss\r\n    if (params.showEmboss) {\r\n        for (let i = 0; i < length; i++) {\r\n            if (i % 4 == 3) continue;\r\n            data[i] = 127 + 2 * data[i] - data[i + 4] - data[i + width * 4];\r\n        }\r\n    }\r\n\r\n    ctx.putImageData(imageData, 0, 0);\r\n}\r\n\r\nexport { setupCanvas, draw, ctx };","export enum Defaults {\r\n    SOUND_ONE = \"./../media/Hollow Knight OST - Greenpath.mp3\"\r\n}","export enum ToggleButtons {\r\n    PLAY = \"https://c.animaapp.com/fgpR59jS/img/svgexport-35--1--1@2x.png\",\r\n    PAUSE = \"https://c.animaapp.com/yPlj5CdF/img/svgexport-83-1.svg\"\r\n}","export class CanvasSprite {\r\n    x: number;\r\n    y: number;\r\n    size: number;\r\n    color: string;\r\n    scale: number;\r\n    velocity: { x: number, y: number };\r\n\r\n    constructor(x: number, y: number, size: number, color: string, scale: number = 1) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.size = size;\r\n        this.color = color;\r\n        this.scale = scale;\r\n        this.velocity = { x: Math.random() * 2 - 1, y: Math.random() * 2 - 1 };\r\n    }\r\n\r\n    update(audioData: Uint8Array, canvasWidth: number, canvasHeight: number): void {\r\n        const percent = audioData.reduce((a, b) => a + b, 0) / (audioData.length * 255);\r\n\r\n        // update size and position\r\n        this.size = Math.max(percent * 100 * this.scale, 20);\r\n        this.x += this.velocity.x;\r\n        this.y += this.velocity.y;\r\n\r\n        // bounce off the x edges\r\n        if (this.x < 0 || this.x > canvasWidth) {\r\n            this.velocity.x *= -1;\r\n        }\r\n\r\n        // bounce off the y edges\r\n        if (this.y < 0 || this.y > canvasHeight) {\r\n            this.velocity.y *= -1;\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        ctx.save();\r\n        ctx.fillStyle = this.color;\r\n        ctx.beginPath();\r\n        ctx.arc(this.x, this.y, this.size * this.scale, 0, 2 * Math.PI);\r\n        ctx.fill();\r\n        ctx.restore();\r\n    }\r\n}","export class Sprite {\r\n    image: HTMLImageElement;\r\n    rotationAngle: number;\r\n    rotationInterval: NodeJS.Timeout | null;\r\n\r\n    constructor(image: HTMLImageElement) {\r\n        this.image = image;\r\n        this.rotationAngle = 0;\r\n        this.rotationInterval = null;\r\n    }\r\n\r\n    startRotation(): void {\r\n        if (this.rotationInterval) return;\r\n\r\n        const rotate = () => {\r\n            this.rotationAngle -= 1;\r\n            this.image.style.transform = `rotate(${this.rotationAngle}deg)`;\r\n            this.rotationInterval = setTimeout(rotate, 1000 / 60) as unknown as NodeJS.Timeout;\r\n        };\r\n\r\n        rotate();\r\n    }\r\n\r\n    stopRotation(): void {\r\n        if (this.rotationInterval) {\r\n            clearTimeout(this.rotationInterval);\r\n            this.rotationInterval = null;\r\n        }\r\n        this.image.style.transform = '';\r\n    }\r\n}","import * as utils from './utils';\r\nimport * as audio from './audio';\r\nimport * as canvas from './canvas';\r\nimport { Sprite } from './classes/Sprite';\r\nimport { Defaults } from './enums/main-defaults.enum';\r\nimport { DrawParams } from './interfaces/drawParams.interface';\r\nimport { AVData } from './interfaces/avData.interface';\r\nimport { ToggleButtons } from './enums/toggle-buttons.enum';\r\n\r\nlet avData: AVData;\r\n\r\nconst preload = async (): Promise<AVData> => {\r\n    // fetch and store the data\r\n    const response = await fetch(\"data/av-data.json\");\r\n    avData = await response.json() as AVData;\r\n\r\n    return avData;\r\n}\r\n\r\nconst init = (): void => {\r\n    audio.setupWebaudio(Defaults.SOUND_ONE);\r\n\r\n    // set up canvas ui\r\n    const canvasElement = document.querySelector(\"canvas\") as HTMLCanvasElement;\r\n    setupUI(canvasElement);\r\n    canvas.setupCanvas(canvasElement, audio.analyserNode);\r\n\r\n    // set up track selection\r\n    const trackElement = document.querySelector(\"#track-selection\") as HTMLElement;\r\n    setupTracks(trackElement);\r\n\r\n    loop();\r\n}\r\n\r\nconst setupTracks = (trackElement: HTMLElement): void => {\r\n    const sprites = new Map<HTMLElement, Sprite>();\r\n\r\n    // create a div for each track\r\n    for (const track of avData.data) {\r\n        let div = document.createElement(\"div\");\r\n        div.classList.add(\"box\", \"tracks\", \"track-info\", \"mb-5\");\r\n        div.dataset.name = track.name;\r\n        div.dataset.path = track.path;\r\n\r\n        const mediaDiv = document.createElement(\"div\");\r\n        mediaDiv.classList.add(\"media\");\r\n\r\n        const mediaLeft = document.createElement(\"div\");\r\n        mediaLeft.classList.add(\"media-left\");\r\n\r\n        const figure = document.createElement(\"figure\");\r\n        figure.classList.add(\"image\", \"is-48x48\");\r\n\r\n        const img = document.createElement(\"img\");\r\n        img.classList.add(\"is-rounded\");\r\n        img.src = track.image;\r\n        figure.appendChild(img);\r\n        mediaLeft.appendChild(figure);\r\n        mediaDiv.appendChild(mediaLeft);\r\n\r\n        const sprite = new Sprite(img);\r\n        sprites.set(div, sprite);\r\n\r\n        const mediaContent = document.createElement(\"div\");\r\n        mediaContent.classList.add(\"media-content\");\r\n\r\n        const h3 = document.createElement(\"h3\");\r\n        h3.classList.add(\"title\", \"is-size-6\");\r\n        h3.innerHTML = track.name;\r\n        mediaContent.appendChild(h3);\r\n\r\n        const p = document.createElement(\"p\");\r\n        p.classList.add(\"subtitle\", \"is-size-7\");\r\n        p.innerHTML = track.author;\r\n        mediaContent.appendChild(p);\r\n\r\n        mediaDiv.appendChild(mediaContent);\r\n        div.appendChild(mediaDiv);\r\n        trackElement.appendChild(div);\r\n    }\r\n\r\n    // start the first sprite rotation\r\n    const initSpirte = sprites.values().next().value;\r\n    initSpirte?.startRotation();\r\n\r\n    // set up click event\r\n    const playButton = document.querySelector(\"#btn-play\") as HTMLButtonElement;\r\n    const playButtonImage = playButton.querySelector(\"img\") as HTMLImageElement;\r\n\r\n    trackElement.onclick = (e: Event) => {\r\n        const trackDiv = (e.target as HTMLElement).closest(\".box\") as HTMLElement;\r\n\r\n        if (trackDiv) {\r\n            const trackPath = trackDiv.dataset.path;\r\n            if (trackPath) {\r\n                audio.loadSoundFile(trackPath);\r\n\r\n                sprites.forEach((sprite, div) => {\r\n                    div === trackDiv ? sprite.startRotation() : sprite.stopRotation();\r\n                });\r\n\r\n                playButtonImage.src = ToggleButtons.PAUSE;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst setupUI = (canvasElement: HTMLCanvasElement): void => {\r\n    // burger menu\r\n    const burgerIcon = document.querySelector('#burger') as HTMLElement;\r\n    const navbarMenu = document.querySelector('#nav-links') as HTMLElement;\r\n\r\n    burgerIcon.addEventListener('click', () => {\r\n        navbarMenu.classList.toggle('is-active');\r\n    });\r\n\r\n    // full screen button\r\n    const fsButton = document.querySelector(\"#btn-fs\") as HTMLButtonElement;\r\n    fsButton.onclick = () => utils.goFullscreen(canvasElement);\r\n\r\n    // play/pause button\r\n    const playButton = document.querySelector(\"#btn-play\") as HTMLButtonElement;\r\n    const playButtonImage = playButton.querySelector(\"img\") as HTMLImageElement;\r\n    playButton.onclick = (e: MouseEvent) => {\r\n        const target = e.currentTarget as HTMLButtonElement;\r\n\r\n        if (audio.audioCtx.state === \"suspended\") {\r\n            audio.audioCtx.resume();\r\n        }\r\n\r\n        if (target.dataset.playing === \"no\") {\r\n            audio.playCurrentSound();\r\n            target.dataset.playing = \"yes\";\r\n            playButtonImage.src = ToggleButtons.PLAY;\r\n        } else {\r\n            audio.pauseCurrentSound();\r\n            target.dataset.playing = \"no\";\r\n            playButtonImage.src = ToggleButtons.PAUSE;\r\n        }\r\n    };\r\n\r\n    // volume slider\r\n    const volumeSlider = document.querySelector(\"#slider-volume\") as HTMLInputElement;\r\n    volumeSlider.oninput = (e: Event) => {\r\n        const target = e.target as HTMLInputElement;\r\n        audio.setVolume(Number(target.value));\r\n    };\r\n    volumeSlider.dispatchEvent(new Event(\"input\"));\r\n\r\n    // Set up bass sliders\r\n    utils.setupSlider({\r\n        sliderId: \"#slider-bass-frequency\",\r\n        labelId: \"#label-bass-frequency\",\r\n        unit: \"Hz\",\r\n        setValueCallback: audio.setBassFrequency\r\n    });\r\n    utils.setupSlider({\r\n        sliderId: \"#slider-bass-gain\",\r\n        labelId: \"#label-bass-gain\",\r\n        unit: \"dB\",\r\n        setValueCallback: audio.setBassGain\r\n    });\r\n\r\n    // Set up treble sliders\r\n    utils.setupSlider({\r\n        sliderId: \"#slider-treble-frequency\",\r\n        labelId: \"#label-treble-frequency\",\r\n        unit: \"Hz\",\r\n        setValueCallback: audio.setTrebleFrequency\r\n    });\r\n    utils.setupSlider({\r\n        sliderId: \"#slider-treble-gain\",\r\n        labelId: \"#label-treble-gain\",\r\n        unit: \"dB\",\r\n        setValueCallback: audio.setTrebleGain\r\n    });\r\n\r\n    // instand of previous verisons, i went with a more compact way\r\n    const checkboxes = [\r\n        { id: \"cb-visualizer\", param: \"visualizerType\" },\r\n        { id: \"cb-sprites\", param: \"showSprites\" },\r\n        { id: \"cb-gradient\", param: \"showGradient\" },\r\n        { id: \"cb-bars\", param: \"showBars\" },\r\n        { id: \"cb-circles\", param: \"showCircles\" },\r\n        { id: \"cb-noise\", param: \"showNoise\" },\r\n        { id: \"cb-invert\", param: \"showInvert\" },\r\n        { id: \"cb-emboss\", param: \"showEmboss\" }\r\n    ];\r\n\r\n    checkboxes.forEach(({ id, param }) => {\r\n        const checkbox = document.querySelector(`#${id}`) as HTMLInputElement;\r\n        checkbox.checked = avData.drawParams[param as keyof DrawParams];\r\n        checkbox.onchange = () => {\r\n            avData.drawParams[param as keyof DrawParams] = checkbox.checked;\r\n        };\r\n    });\r\n\r\n    const progressBar = document.querySelector(\"#progress-bar\") as HTMLInputElement;\r\n    progressBar.oninput = (e: Event) => {\r\n        const target = e.target as HTMLInputElement;\r\n        const newTime = audio.getDuration() * (Number(target.value) / 100);\r\n        audio.seekTo(newTime);\r\n    };\r\n}\r\n\r\nconst loop = (): void => {\r\n    setTimeout(loop, 1000 / 60);\r\n    canvas.draw(avData.drawParams);\r\n    updateProgress();\r\n}\r\n\r\n/**\r\n * update the progress bar and label\r\n */\r\nconst updateProgress = (): void => {\r\n    const progressBar = document.querySelector(\"#progress-bar\") as HTMLInputElement;\r\n    const progressLabel = document.querySelector(\"#progress-label\") as HTMLElement;\r\n\r\n    const currentTime = audio.getCurrentTime();\r\n    const duration = audio.getDuration();\r\n\r\n    if (duration > 0) {\r\n        progressBar.value = ((currentTime / duration) * 100).toString();\r\n        progressLabel.innerHTML = `${utils.formatTime(currentTime)} / ${utils.formatTime(duration)}`;\r\n    }\r\n}\r\n\r\nexport { preload, init };","import * as main from \"./main\";\r\n\r\nconst load = async (): Promise<void> => {\r\n    const data = await main.preload();\r\n    document.title = data.title;\r\n\r\n    try {\r\n        main.init();\r\n    }\r\n    catch {\r\n        // ignore\r\n    }\r\n}\r\n\r\nload();"],"names":["Defaults","BiquadDefaults","audioCtx","sourceNode","analyserNode","gainNode","bassFilter","trebleFilter","makeColor","red","green","blue","alpha","setupSlider","sliderId","labelId","unit","setValueCallback","slider","document","querySelector","label","oninput","e","target","Number","value","innerHTML","dispatchEvent","Event","formatTime","seconds","minutes","Math","floor","secs","String","padStart","ctx","canvasWidth","canvasHeight","gradient","audioData","sprite1","sprite2","sprite3","ToggleButtons","loadSoundFile","filePath","src","setBassFrequency","frequency","setValueAtTime","currentTime","setBassGain","gain","setTrebleFrequency","setTrebleGain","getDuration","duration","x","y","size","color","scale","this","velocity","random","update","percent","reduce","a","b","length","max","draw","save","fillStyle","beginPath","arc","PI","fill","restore","image","rotationAngle","rotationInterval","startRotation","rotate","style","transform","setTimeout","stopRotation","clearTimeout","avData","setupTracks","trackElement","sprites","Map","data","track","div","createElement","classList","add","dataset","name","path","mediaDiv","mediaLeft","figure","img","appendChild","sprite","Sprite","set","mediaContent","h3","p","author","initSpirte","values","next","playButtonImage","onclick","trackDiv","closest","trackPath","forEach","PAUSE","setupUI","canvasElement","burgerIcon","navbarMenu","addEventListener","toggle","element","requestFullscreen","playButton","currentTarget","state","resume","playing","play","PLAY","pause","volumeSlider","id","param","checkbox","checked","drawParams","onchange","time","loop","params","visualizerType","showSprites","showGradient","showBars","showCircles","showNoise","showInvert","showEmboss","getByteFrequencyData","getByteTimeDomainData","globalAlpha","fillRect","barWidth","createLinearGradient","addColorStop","strokeStyle","lineWidth","lineJoin","i","barHeight","ceil","strokeRect","maxRadius","centerX","centerY","undefined","pulse","sin","Date","now","circleRadius","closePath","imageData","getImageData","width","putImageData","updateProgress","progressBar","progressLabel","toString","fetch","json","title","AudioContext","SOUND_ONE","window","Audio","createMediaElementSource","createAnalyser","fftSize","NUM_SAMPLE","createGain","GAIN","createBiquadFilter","type","BASS_FREQ","BASS_GAIN","TREBLE_FREQ","TREBLE_GAIN","connect","destination","analyserNodeRef","getContext","height","startX","startY","endX","endY","lg","Uint8Array","CanvasSprite"],"sourceRoot":""}